{"project": "pywatershed", "project_url": "http://github.com/EC-USGS/pywatershed", "show_commit_url": "http://github.com/EC-USGS/pywatershed/commit/", "hash_length": 8, "revision_to_hash": {"486": "71060d5939e62514174037ec4575609e244c258e", "826": "f623e5c798d68d1078d9ab00e753d1d3798fe8d9", "925": "f72e5aaf25b3d0a6ae9a6e55ecafc2c397d1a54b", "1110": "8188a59ef43815c99f4113a225ea660455db1813", "1130": "8503ca779f1f0b52c9b4531bc7ea5bb46cbdb917", "1337": "f773869a01332a860ff5231a903a08c85da3047a"}, "revision_to_date": {"486": 1662264651000, "826": 1682625074000, "925": 1684848737000, "1110": 1689699531000, "1130": 1689909224000, "1337": 1702928492000}, "params": {"arch": ["arm64"], "cpu": ["Apple M1 Pro"], "machine": ["mac-m1"], "num_cpu": ["10"], "os": ["Darwin 21.6.0"], "ram": ["16GB"], "python": ["3.10"], "numpy": [""], "netcdf4": [""], "xarray": [""], "branch": ["main"]}, "graph_param_list": [{"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "mac-m1", "num_cpu": "10", "os": "Darwin 21.6.0", "ram": "16GB", "python": "3.10", "numpy": "", "netcdf4": "", "xarray": "", "branch": "main"}], "benchmarks": {"imports.Import.timeraw_import_pywatershed": {"code": "class Import:\n    def timeraw_import_pywatershed(self):\n        if _is_pws:\n            return \"import pywatershed\"\n        else:\n            return \"import pynhm\"", "min_run_count": 2, "name": "imports.Import.timeraw_import_pywatershed", "number": 1, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "1d055dd643c44a7405e9b01bea4b40454f04ccb488a1abbb621d9bd9c2483787", "warmup_time": -1}, "imports.Import.timeraw_import_pywatershed_only": {"code": "class Import:\n    def timeraw_import_pywatershed_only(self):\n        if _is_pws:\n            return \"import pywatershed\", \"import numpy\"\n        else:\n            return \"import pynhm\", \"import numpy\"", "min_run_count": 2, "name": "imports.Import.timeraw_import_pywatershed_only", "number": 1, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "39b4d6417359e6cdf55f1f276123553f55a1ca2feaa06a9782371ab2067a5d41", "warmup_time": -1}, "prms.PRMSBasics.time_prms_control_read": {"code": "class PRMSBasics:\n    @parameterized(\n        [\"domain\"],\n        (domains),\n    )\n    def time_prms_control_read(self, domain):\n        control_file = test_data_dir / f\"{domain}/control.test\"\n        if pws.__version__ == \"0.2.0\":\n            _ = pws.Control.load(control_file)\n        else:\n            _ = pws.Control.load_prms(control_file, warn_unused_options=False)\n    \n        return", "min_run_count": 2, "name": "prms.PRMSBasics.time_prms_control_read", "number": 0, "param_names": ["domain"], "params": [["'hru_1'", "'drb_2yr'", "'ucb_2yr'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "39e4b490b20c6e7bb07dbb3e1cac1cfa9aa5779224c7cbaf0b2beb1bfe3fe0e0", "warmup_time": -1}, "prms.PRMSBasics.time_prms_parameter_read": {"code": "class PRMSBasics:\n    @parameterized(\n        [\"domain\"],\n        (domains),\n    )\n    def time_prms_parameter_read(self, domain):\n        parameter_file = test_data_dir / f\"{domain}/myparam.param\"\n        if _is_pws:\n            _ = pws.parameters.PrmsParameters.load(parameter_file)\n        else:\n            _ = pws.PrmsParameters.load(parameter_file)\n        return", "min_run_count": 2, "name": "prms.PRMSBasics.time_prms_parameter_read", "number": 0, "param_names": ["domain"], "params": [["'hru_1'", "'drb_2yr'", "'ucb_2yr'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a5d7e2abd91ff70478558328adca2f324567d2c3acd6abf194de4dbc896a75b2", "warmup_time": -1}, "prms.PRMSModels.time_prms_run": {"code": "class PRMSModels:\n    @parameterized(\n        [\"domain\", \"procs\", \"output\"],\n        (\n            domains,\n            list(model_tests.keys()),\n            outputs,\n        ),\n    )\n    def time_prms_run(\n        self,\n        domain: str,\n        procs: str,\n        output: Union[None, Literal[\"separate\", \"together\"]],\n    ):\n        print(\n            \"\\nPRMSModels args: \\n\",\n            f\"domain: {domain}\\n\",\n            f\"procs:{procs}\\n\",\n            f\"output: {output}\\n\",\n        )\n    \n        _ = self.model_setup_run(\n            domain=domain, processes=model_tests[procs], write_output=output\n        )\n\n    def setup(self, *args):\n        self.domain = args[0]\n        self.tag = args[1]\n        self.processes = model_tests[self.tag]\n    \n        self.control_file = test_data_dir / f\"{self.domain}/control.test\"\n        self.parameter_file = test_data_dir / f\"{self.domain}/myparam.param\"\n    \n        # backwards compatability pre pywatershed\n        if _is_pws:\n            self.params = pws.parameters.PrmsParameters.load(\n                self.parameter_file\n            )\n        else:\n            self.params = pws.PrmsParameters.load(self.parameter_file)\n    \n        # backwards compatability pre 0.2.0\n        try:\n            self.lt_v0_2_0 = True\n            self.control = pws.Control.load(\n                self.control_file, params=self.params\n            )\n        except:\n            self.lt_v0_2_0 = False\n    \n        if hasattr(self, \"control\"):\n            del self.control\n    \n        # setup input_dir with symlinked prms inputs and outputs\n        self.domain_dir = pl.Path(f\"PRMSModels_{self.domain}\")\n        self.domain_dir.mkdir(exist_ok=True)\n        self.tag_dir = self.domain_dir / self.tag\n        self.tag_input_dir = self.tag_dir / \"input\"\n        self.tag_input_dir.mkdir(parents=True)\n        for ff in (test_data_dir / self.domain).glob(\"*.nc\"):\n            shutil.copy(ff, self.tag_input_dir / ff.name)\n            for ff in (test_data_dir / f\"{self.domain}/output\").glob(\"*.nc\"):\n                shutil.copy(ff, self.tag_input_dir / ff.name)", "min_run_count": 2, "name": "prms.PRMSModels.time_prms_run", "number": 0, "param_names": ["domain", "procs", "output"], "params": [["'hru_1'", "'drb_2yr'", "'ucb_2yr'"], ["'solar'", "'atm'", "'canopy'", "'snow'", "'runoff'", "'soil'", "'gw'", "'channel'", "'nhm'"], ["None", "'separate'", "'together'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f5be4eee51548faf2950f0569c52845840a26aa4b91caff376dc01ec5be17194", "warmup_time": -1}}, "machines": {"mac-m1": {"arch": "arm64", "cpu": "Apple M1 Pro", "machine": "mac-m1", "num_cpu": "10", "os": "Darwin 21.6.0", "ram": "16GB", "version": 1}}, "tags": {"0.1.1": 826, "0.1.3": 925, "0.2.0": 1110, "0.2.1": 1130, "1.0.0": 1337, "v2022.0.1": 486}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}
