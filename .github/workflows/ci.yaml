name: CI
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"

jobs:
  pynhm_setup:
    name: standard installation
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:

      # check out repo
      - name: Checkout repo
        uses: actions/checkout@v2.4.0

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9

      - name: Upgrade pip and install build and twine
        run: |
          python -m pip install --upgrade pip
          pip install wheel build twine

      - name: Base installation
        run: |
          pip --verbose install .

      - name: Print pyhmn version
        run: |
          python -c "import pynhm; print(pynhm.__version__)"

      - name: Build pynhm, check dist outputs
        run: |
          python -m build
          twine check --strict dist/*

  pynhm_lint:
    name: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: bash

    steps:
      # check out repo
      - name: Checkout repo
        uses: actions/checkout@v2.4.0

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          pip install wheel
          pip install -r ./ci/requirements/environment.txt

      - name: Version info
        run: |
          pip -V
          pip list

      - name: Run isort
        run: |
          echo "if isort check fails update isort using"
          echo "  pip install isort --upgrade"
          echo "and run"
          echo "  isort ./pynhm"
          echo "and then commit the changes."
          isort --check --diff ./pynhm

      - name: Run black
        run: |
          echo "if black check fails update black using"
          echo "  pip install black --upgrade"
          echo "and run"
          echo "  black ./pynhm"
          echo "and then commit the changes."
          black --check --diff ./pynhm

      - name: Run flake8
        run: |
          flake8 --count --show-source --exit-zero ./pynhm

      - name: Run pylint
        run: |
          pylint --jobs=2 --errors-only --exit-zero ./pynhm


  test:
    name: ${{ matrix.os}} py${{ matrix.python-version }}

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
        python-version: [ "3.8", "3.9" ]  #, "3.10"]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2.4.0

      - name: Symlink gfortran (macOS)
        if: runner.os == 'macOS'
        run: |
          # make sure gfortran is available
          sudo ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          which gfortran
          gfortran --version

      - name: Set environment variables
        run: |
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_ENV

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64


      - name: Install dependencies and this package
        run: |
          pip install wheel
          pip install -r ./ci/requirements/environment.txt
          pip install .

      - name: Version info
        run: |
          pip -V
          pip list

      - name: Run available domains with PRMS and convert csv output to NetCDF
        working-directory: test_data/scripts
        run: |
          pytest -v -n=auto --durations=0 test_run_domains.py
          pytest -v -n=auto --durations=0 test_nc_domains.py

      - name: List all NetCDF files in test_data directory
        working-directory: test_data
        run: |
          find . -name "*.nc"

      - name: Run tests
        working-directory: autotest
        run: pytest
          -v
          -n=auto
          --durations=0
          --all_domains
          --cov=pynhm
          --cov-report=xml
          --junitxml=pytest.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Test results for ${{ runner.os }}-${{ matrix.python-version }}
          path: ./autotest/pytest.xml

      - name: Upload code coverage to Codecov
        uses: codecov/codecov-action@v2.1.0
        with:
          file: ./autotest/coverage.xml
          # flags: unittests
          env_vars: RUNNER_OS,PYTHON_VERSION
          # name: codecov-umbrella
          fail_ci_if_error: false
          version: "v0.1.15"
